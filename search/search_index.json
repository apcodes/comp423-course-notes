{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Anish Parepalli's Course Notes","text":"<p>This is my home page. I will use it to organzize and share my course notes. I am adding more to test if the page actually deploys...</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container for Go","text":"<ul> <li>Primary author: Anish Parepalli</li> <li>Reviewer: Matthew Thornton</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we dive in, make sure you have:</p> <ol> <li>A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</li> <li>Git installed: Install Git if you don\u2019t already have it.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Docker installed: We need this to run the Dev Container. If you don't have it, Get Docker here.</li> <li>Command-line basics: Know some basic CLI.  If in doubt, review the Learn a CLI text!</li> </ol>"},{"location":"tutorials/go-setup/#creating-the-repository","title":"Creating the Repository","text":"<p>Local Directory and Git Initialization </p> <ol> <li>Open Terminal/Command Prompt.  </li> <li>Create a new directory for the project. <pre><code>mkdir go-project\ncd go-project\n</code></pre></li> <li>Initialize a new Git Repository.  <pre><code>git init\n</code></pre></li> </ol> <p>What is the effect of running the <code>init</code> subcommand?</p> <p>Initialize a folder as a new, empty git repository. </p> <ol> <li>Create a README file.  <pre><code>echo \"# Go Project\" &gt; README.md\necho \"Tutorial Link --&gt; [Here](https://apcodes.github.io/comp423-course-notes/tutorials/go-setup/)\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<ol> <li>Log in to your GitHub account and navigate to the Create a New Repository page.</li> <li>Fill in the details as follows:  <pre><code>   Repo Name: Go Project   \n   Description: \"Making Hello World in Go!\"  \n   Visibility: Public \n</code></pre></li> <li>Do not initialize the repo with a README, .gitingore, or license. </li> <li>Click Create Repository. </li> </ol>"},{"location":"tutorials/go-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to Github","text":"<ol> <li>Add GitHub Repository as remote. <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/Go-Project\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username. </li> <li>Check your default branch name with the subcommand <code>git branch</code>. If it's not main, rename it to main with the following command:  <pre><code>git branch -M main. \n</code></pre> Old versions of git choose the name master for the primary branch, but these days main is the standard primary branch name.</li> <li> <p>Push your local commits to the github repo: <pre><code>git push --set-upstream origin main\n</code></pre></p> </li> <li> <p>Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use <code>git log</code> locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p> </li> </ol>"},{"location":"tutorials/go-setup/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":""},{"location":"tutorials/go-setup/#step-1-add-the-development-container-configuration","title":"Step 1. Add the Development Container Configuration","text":"<ol> <li>In VS Code open the go-project directory. Go  File &gt; Open Folder.</li> <li>Install Dev Containers extension in VS Code. </li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside this \u201chidden\u201d directory.git   <pre><code>.devcontainer/devcontainer.json\n</code></pre></li> <li>Place the following code inside your newly created devcontainer.json file: <pre><code>{\n    \"name\": \"COMP423 Course Notes\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/go\",\n    \"customizations\": {\n        \"vscode\": {\n            \"settings\": {},\n            \"extensions\": [\"golang.go\"]\n        }\n    },\n    \"postCreateCommand\": \"go version\"\n}\n</code></pre></li> <li>Reopen the project in dev container by pressing ctrl + shift + p (cmd + shift + p for mac) then type \"Dev Containers: Reopen in Container\".   </li> <li>Using the go version command in the terminal, you can see what version of go your on. <pre><code>go version\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#creating-your-go-project","title":"Creating Your Go Project","text":"<ol> <li>if your not in your directory already, cd into your go-project directory. <pre><code>cd go-project\n</code></pre></li> <li>Initialize a Go module <pre><code>go mod init hello-comp423\n</code></pre> This sets up a new Go project and creates a go.mod file, which helps manage dependencies.</li> <li>Create your main file: Inside your project folder, create a new file named main.go. <pre><code>touch main.go\n</code></pre> Edit <code>main.go</code> to display \u201cHello COMP423\u201d: Open the file in VSCode and add the following code: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#to-run-the-program","title":"To Run the Program","text":"<p>There are 2 different ways to run the program. The first method is the <code>go run</code> command.  This is a simplified way to compile and run the Go program in a single line: <pre><code>go run main.go\n</code></pre></p> <p>The second method is to use <code>go build</code>.   </p> <p>Use <code>go build</code> to compile the Go program into an executable file. <pre><code>go build\n</code></pre> This will create an executable file named <code>hello-comp423</code> in the same directory. To run it, type: <pre><code>./hello-comp423\n</code></pre></p> <p>This is similar to using gcc to compile a C program, which we did in Comp 211, where you would run:</p> <p><pre><code>gcc main.c -o output\n./output\n</code></pre> In Go, go build handles the compilation step and produces the executable directly.</p> <p>If you would like to save changes simply follow the git basics. The commands below pushes your changes so you can view them on GitHub: <pre><code>git add .\ngit commit -m \"Followed Go Tutorial and can print Hello World!\"\ngit push -u origin main\n</code></pre> Congratulations you now have a working Dev Container to create a Go Project in! Many parts of this tutorial are inspired by Kris Jordan\u2019s Starting a Static Website Project with MkDocs.</p>"}]}